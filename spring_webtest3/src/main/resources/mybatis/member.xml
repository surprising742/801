<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.model.mapper.MemberMapper">
	<select id="passwd_find" parameterType="Map" resultType="String">
		select passwd from member 
		where id = #{id} and email = #{email}  
	</select>
	
	<select id="id_find" parameterType="Map" resultType="String">
		select id from member    
		where mname = #{mname} and email = #{email}  
	</select>

	<delete id="delete" parameterType="String" >
		delete from member
		where id = #{id}
	</delete>

	<update id="updatePw" parameterType="Map">
		update member 
		set passwd = #{pw}
		where id = #{id}
	</update>
	
	<update id="updateFile" parameterType="Map">
		update member
		set fname = #{fname}
		where id = #{id}
	</update>
	
	<update id="update" parameterType="MemberDTO">
		update member  
		set            
			tel = #{tel},    
			email = #{email},  
			zipcode = #{zipcode},  
			address1 = #{address1},  
			address2 = #{address2},  
			job = #{job}     
		where id= #{id}
	</update>

	<select id = "read" parameterType="String" resultType="MemberDTO">
		SELECT id, mname, tel, email, zipcode, address1, address2, 
	    job, mdate, fname, grade                         
		FROM member                                             
		WHERE id= #{id}                                         
	</select>

	<select id="getGrade" parameterType="String" resultType="String">
		select grade
		from member
		where id = #{id}
	</select>

	<insert id="create" parameterType="MemberDTO">
		insert into member(id, passwd,
		mname, tel, email,
		zipcode, address1, address2, job, mdate, fname,
		grade)
		values(
		#{id}, #{passwd}, #{mname}, #{tel}, #{email}, #{zipcode},
		#{address1}, #{address2}, #{job}, sysdate, #{fname},'H')
	</insert>

	<select id="duplicateEmail" parameterType="String" resultType="int">
		select count(id)
		from member
		where email = #{email}
	</select>

	<select id="duplicateID" parameterType="String" resultType="int">
		select count(id)
		from member
		where id = #{id}
	</select>

	<select id="loginCheck" parameterType="Map" resultType="int">
		select
		count(id) as cnt
		from member
		where id = #{id}
		and passwd = #{passwd}
	</select>

	<select id="total" parameterType="Map" resultType="int">
		select count(*) from member
		<where>
			<choose>
				<when test="col=='mname'">
					mname like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
				<when test="col=='email'">
					email like '%'||#{word}||'%'
				</when>
			</choose>
		</where>
	</select>

	<select id="list" parameterType="Map" resultType="MemberDTO">
		SELECT id, mname, tel, email, zipcode, address1, address2,
		fname, r
		from(
		SELECT id, mname, tel,
		email, zipcode, address1, address2,
		fname,
		rownum r
		from(
		SELECT id, mname, tel, email,
		zipcode, address1,
		address2,
		fname
		FROM member
		<where>
			<choose>
				<when test="col=='mname'">
					mname like '%'||#{word}||'%'
				</when>
				<when test="col=='id'">
					id like '%'||#{word}||'%'
				</when>
				<when test="col=='email'">
					email like '%'||#{word}||'%'
				</when>
			</choose>
		</where>
		ORDER
		BY mdate DESC
		)
		) 
		 <![CDATA[
		 where r >= #{sno} and r<= #{eno} 
		 ]]>
	</select>
</mapper>